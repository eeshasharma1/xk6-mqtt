/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.hive.vehicle_state.CameraState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.CameraState.CameraActiveStatus', null, global);
goog.exportSymbol('proto.hive.vehicle_state.ChargeState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.ChargeState.ChargingStatus', null, global);
goog.exportSymbol('proto.hive.vehicle_state.DoorState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.DoorState.DoorLockState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.DoorState.DoorOpenCloseState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.DriveModeState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.DriveModeState.Mode', null, global);
goog.exportSymbol('proto.hive.vehicle_state.DriveState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.DriveState.GearState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.GPSCoordinates', null, global);
goog.exportSymbol('proto.hive.vehicle_state.HVACState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.HVACState.SeatState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel', null, global);
goog.exportSymbol('proto.hive.vehicle_state.SentryModeState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.SentryModeState.Status', null, global);
goog.exportSymbol('proto.hive.vehicle_state.SpoilerState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.TargetInfo', null, global);
goog.exportSymbol('proto.hive.vehicle_state.TargetInfo.HealthStatus', null, global);
goog.exportSymbol('proto.hive.vehicle_state.TargetsState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.ThermalManagementState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.TireState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.TurnSignalState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.TurnSignalState.State', null, global);
goog.exportSymbol('proto.hive.vehicle_state.ValetModeState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.ValetModeState.Status', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleCamerasState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleDoorsState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleLightsState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleLightsState.HeadlightsState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleLightsState.TaillightsState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleOperatingState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleOperatingState.OperatingState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleOperatingState.TransitionStatus', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleState', null, global);
goog.exportSymbol('proto.hive.vehicle_state.VehicleTiresState', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.CameraState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.CameraState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.CameraState.displayName = 'proto.hive.vehicle_state.CameraState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.CameraState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.CameraState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.CameraState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.CameraState.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeStatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.CameraState}
 */
proto.hive.vehicle_state.CameraState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.CameraState;
  return proto.hive.vehicle_state.CameraState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.CameraState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.CameraState}
 */
proto.hive.vehicle_state.CameraState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.CameraState.CameraActiveStatus} */ (reader.readEnum());
      msg.setActiveStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.CameraState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.CameraState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.CameraState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.CameraState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActiveStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.CameraState.CameraActiveStatus = {
  CAMERA_ACTIVE_STATUS_UNSET: 0,
  ACTIVE: 1,
  INACTIVE: 2
};

/**
 * optional CameraActiveStatus active_status = 1;
 * @return {!proto.hive.vehicle_state.CameraState.CameraActiveStatus}
 */
proto.hive.vehicle_state.CameraState.prototype.getActiveStatus = function() {
  return /** @type {!proto.hive.vehicle_state.CameraState.CameraActiveStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.CameraState.CameraActiveStatus} value */
proto.hive.vehicle_state.CameraState.prototype.setActiveStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.ChargeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.ChargeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.ChargeState.displayName = 'proto.hive.vehicle_state.ChargeState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.ChargeState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.ChargeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.ChargeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.ChargeState.toObject = function(includeInstance, msg) {
  var f, obj = {
    chargingStatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chargePercentage: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    chargingRateKw: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    rangeKm: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.ChargeState}
 */
proto.hive.vehicle_state.ChargeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.ChargeState;
  return proto.hive.vehicle_state.ChargeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.ChargeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.ChargeState}
 */
proto.hive.vehicle_state.ChargeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.ChargeState.ChargingStatus} */ (reader.readEnum());
      msg.setChargingStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChargePercentage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChargingRateKw(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRangeKm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.ChargeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.ChargeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.ChargeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.ChargeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChargingStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChargePercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getChargingRateKw();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getRangeKm();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.ChargeState.ChargingStatus = {
  UNSET: 0,
  NOT_CHARGING: 1,
  CHARGING: 2
};

/**
 * optional ChargingStatus charging_status = 1;
 * @return {!proto.hive.vehicle_state.ChargeState.ChargingStatus}
 */
proto.hive.vehicle_state.ChargeState.prototype.getChargingStatus = function() {
  return /** @type {!proto.hive.vehicle_state.ChargeState.ChargingStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.ChargeState.ChargingStatus} value */
proto.hive.vehicle_state.ChargeState.prototype.setChargingStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float charge_percentage = 2;
 * @return {number}
 */
proto.hive.vehicle_state.ChargeState.prototype.getChargePercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.hive.vehicle_state.ChargeState.prototype.setChargePercentage = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float charging_rate_kw = 3;
 * @return {number}
 */
proto.hive.vehicle_state.ChargeState.prototype.getChargingRateKw = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.hive.vehicle_state.ChargeState.prototype.setChargingRateKw = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float range_km = 4;
 * @return {number}
 */
proto.hive.vehicle_state.ChargeState.prototype.getRangeKm = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.hive.vehicle_state.ChargeState.prototype.setRangeKm = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.DoorState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.DoorState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.DoorState.displayName = 'proto.hive.vehicle_state.DoorState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.DoorState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.DoorState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.DoorState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.DoorState.toObject = function(includeInstance, msg) {
  var f, obj = {
    lockState: jspb.Message.getFieldWithDefault(msg, 1, 0),
    openCloseState: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.DoorState}
 */
proto.hive.vehicle_state.DoorState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.DoorState;
  return proto.hive.vehicle_state.DoorState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.DoorState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.DoorState}
 */
proto.hive.vehicle_state.DoorState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.DoorState.DoorLockState} */ (reader.readEnum());
      msg.setLockState(value);
      break;
    case 2:
      var value = /** @type {!proto.hive.vehicle_state.DoorState.DoorOpenCloseState} */ (reader.readEnum());
      msg.setOpenCloseState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.DoorState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.DoorState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.DoorState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.DoorState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOpenCloseState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.DoorState.DoorLockState = {
  LOCK_UNSET: 0,
  UNLOCKED: 1,
  LOCKED: 2
};

/**
 * @enum {number}
 */
proto.hive.vehicle_state.DoorState.DoorOpenCloseState = {
  OPENCLOSE_UNSET: 0,
  OPEN: 1,
  CLOSED: 2
};

/**
 * optional DoorLockState lock_state = 1;
 * @return {!proto.hive.vehicle_state.DoorState.DoorLockState}
 */
proto.hive.vehicle_state.DoorState.prototype.getLockState = function() {
  return /** @type {!proto.hive.vehicle_state.DoorState.DoorLockState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.DoorState.DoorLockState} value */
proto.hive.vehicle_state.DoorState.prototype.setLockState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DoorOpenCloseState open_close_state = 2;
 * @return {!proto.hive.vehicle_state.DoorState.DoorOpenCloseState}
 */
proto.hive.vehicle_state.DoorState.prototype.getOpenCloseState = function() {
  return /** @type {!proto.hive.vehicle_state.DoorState.DoorOpenCloseState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hive.vehicle_state.DoorState.DoorOpenCloseState} value */
proto.hive.vehicle_state.DoorState.prototype.setOpenCloseState = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.DriveState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.DriveState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.DriveState.displayName = 'proto.hive.vehicle_state.DriveState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.DriveState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.DriveState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.DriveState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.DriveState.toObject = function(includeInstance, msg) {
  var f, obj = {
    gearState: jspb.Message.getFieldWithDefault(msg, 1, 0),
    velocity: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    odometerKm: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.DriveState}
 */
proto.hive.vehicle_state.DriveState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.DriveState;
  return proto.hive.vehicle_state.DriveState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.DriveState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.DriveState}
 */
proto.hive.vehicle_state.DriveState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.DriveState.GearState} */ (reader.readEnum());
      msg.setGearState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOdometerKm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.DriveState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.DriveState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.DriveState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.DriveState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGearState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVelocity();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getOdometerKm();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.DriveState.GearState = {
  UNSET: 0,
  PARK: 1,
  REVERSE: 2,
  NEUTRAL: 3,
  DRIVE: 4
};

/**
 * optional GearState gear_state = 1;
 * @return {!proto.hive.vehicle_state.DriveState.GearState}
 */
proto.hive.vehicle_state.DriveState.prototype.getGearState = function() {
  return /** @type {!proto.hive.vehicle_state.DriveState.GearState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.DriveState.GearState} value */
proto.hive.vehicle_state.DriveState.prototype.setGearState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float velocity = 2;
 * @return {number}
 */
proto.hive.vehicle_state.DriveState.prototype.getVelocity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.hive.vehicle_state.DriveState.prototype.setVelocity = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float odometer_km = 3;
 * @return {number}
 */
proto.hive.vehicle_state.DriveState.prototype.getOdometerKm = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.hive.vehicle_state.DriveState.prototype.setOdometerKm = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.GPSCoordinates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.GPSCoordinates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.GPSCoordinates.displayName = 'proto.hive.vehicle_state.GPSCoordinates';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.GPSCoordinates.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.GPSCoordinates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.GPSCoordinates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.GPSCoordinates.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitudeDegrees: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    longitudeDegrees: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.GPSCoordinates}
 */
proto.hive.vehicle_state.GPSCoordinates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.GPSCoordinates;
  return proto.hive.vehicle_state.GPSCoordinates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.GPSCoordinates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.GPSCoordinates}
 */
proto.hive.vehicle_state.GPSCoordinates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitudeDegrees(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitudeDegrees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.GPSCoordinates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.GPSCoordinates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.GPSCoordinates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.GPSCoordinates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitudeDegrees();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLongitudeDegrees();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float latitude_degrees = 1;
 * @return {number}
 */
proto.hive.vehicle_state.GPSCoordinates.prototype.getLatitudeDegrees = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.hive.vehicle_state.GPSCoordinates.prototype.setLatitudeDegrees = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float longitude_degrees = 2;
 * @return {number}
 */
proto.hive.vehicle_state.GPSCoordinates.prototype.getLongitudeDegrees = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.hive.vehicle_state.GPSCoordinates.prototype.setLongitudeDegrees = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.HVACState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.HVACState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.HVACState.displayName = 'proto.hive.vehicle_state.HVACState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.HVACState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.HVACState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.HVACState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.HVACState.toObject = function(includeInstance, msg) {
  var f, obj = {
    airCirculationButtonPressed: jspb.Message.getFieldWithDefault(msg, 1, false),
    frontLeft: (f = msg.getFrontLeft()) && proto.hive.vehicle_state.HVACState.SeatState.toObject(includeInstance, f),
    frontRight: (f = msg.getFrontRight()) && proto.hive.vehicle_state.HVACState.SeatState.toObject(includeInstance, f),
    backLeft: (f = msg.getBackLeft()) && proto.hive.vehicle_state.HVACState.SeatState.toObject(includeInstance, f),
    backRight: (f = msg.getBackRight()) && proto.hive.vehicle_state.HVACState.SeatState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.HVACState}
 */
proto.hive.vehicle_state.HVACState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.HVACState;
  return proto.hive.vehicle_state.HVACState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.HVACState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.HVACState}
 */
proto.hive.vehicle_state.HVACState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAirCirculationButtonPressed(value);
      break;
    case 2:
      var value = new proto.hive.vehicle_state.HVACState.SeatState;
      reader.readMessage(value,proto.hive.vehicle_state.HVACState.SeatState.deserializeBinaryFromReader);
      msg.setFrontLeft(value);
      break;
    case 3:
      var value = new proto.hive.vehicle_state.HVACState.SeatState;
      reader.readMessage(value,proto.hive.vehicle_state.HVACState.SeatState.deserializeBinaryFromReader);
      msg.setFrontRight(value);
      break;
    case 4:
      var value = new proto.hive.vehicle_state.HVACState.SeatState;
      reader.readMessage(value,proto.hive.vehicle_state.HVACState.SeatState.deserializeBinaryFromReader);
      msg.setBackLeft(value);
      break;
    case 5:
      var value = new proto.hive.vehicle_state.HVACState.SeatState;
      reader.readMessage(value,proto.hive.vehicle_state.HVACState.SeatState.deserializeBinaryFromReader);
      msg.setBackRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.HVACState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.HVACState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.HVACState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.HVACState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAirCirculationButtonPressed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFrontLeft();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hive.vehicle_state.HVACState.SeatState.serializeBinaryToWriter
    );
  }
  f = message.getFrontRight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hive.vehicle_state.HVACState.SeatState.serializeBinaryToWriter
    );
  }
  f = message.getBackLeft();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hive.vehicle_state.HVACState.SeatState.serializeBinaryToWriter
    );
  }
  f = message.getBackRight();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.hive.vehicle_state.HVACState.SeatState.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.HVACState.SeatState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.HVACState.SeatState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.HVACState.SeatState.displayName = 'proto.hive.vehicle_state.HVACState.SeatState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.HVACState.SeatState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.HVACState.SeatState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.HVACState.SeatState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.HVACState.SeatState.toObject = function(includeInstance, msg) {
  var f, obj = {
    airTemperatureCelsius: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    seatHeating: jspb.Message.getFieldWithDefault(msg, 2, 0),
    seatVentilation: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.HVACState.SeatState}
 */
proto.hive.vehicle_state.HVACState.SeatState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.HVACState.SeatState;
  return proto.hive.vehicle_state.HVACState.SeatState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.HVACState.SeatState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.HVACState.SeatState}
 */
proto.hive.vehicle_state.HVACState.SeatState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAirTemperatureCelsius(value);
      break;
    case 2:
      var value = /** @type {!proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel} */ (reader.readEnum());
      msg.setSeatHeating(value);
      break;
    case 3:
      var value = /** @type {!proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel} */ (reader.readEnum());
      msg.setSeatVentilation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.HVACState.SeatState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.HVACState.SeatState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.HVACState.SeatState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.HVACState.SeatState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAirTemperatureCelsius();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getSeatHeating();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSeatVentilation();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel = {
  UNSET: 0,
  OFF: 1,
  LEVEL_1: 2,
  LEVEL_2: 3,
  LEVEL_3: 4
};

/**
 * optional float air_temperature_celsius = 1;
 * @return {number}
 */
proto.hive.vehicle_state.HVACState.SeatState.prototype.getAirTemperatureCelsius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.hive.vehicle_state.HVACState.SeatState.prototype.setAirTemperatureCelsius = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional SeatHVACLevel seat_heating = 2;
 * @return {!proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel}
 */
proto.hive.vehicle_state.HVACState.SeatState.prototype.getSeatHeating = function() {
  return /** @type {!proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel} value */
proto.hive.vehicle_state.HVACState.SeatState.prototype.setSeatHeating = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional SeatHVACLevel seat_ventilation = 3;
 * @return {!proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel}
 */
proto.hive.vehicle_state.HVACState.SeatState.prototype.getSeatVentilation = function() {
  return /** @type {!proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.hive.vehicle_state.HVACState.SeatState.SeatHVACLevel} value */
proto.hive.vehicle_state.HVACState.SeatState.prototype.setSeatVentilation = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool air_circulation_button_pressed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hive.vehicle_state.HVACState.prototype.getAirCirculationButtonPressed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.hive.vehicle_state.HVACState.prototype.setAirCirculationButtonPressed = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional SeatState front_left = 2;
 * @return {?proto.hive.vehicle_state.HVACState.SeatState}
 */
proto.hive.vehicle_state.HVACState.prototype.getFrontLeft = function() {
  return /** @type{?proto.hive.vehicle_state.HVACState.SeatState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.HVACState.SeatState, 2));
};


/** @param {?proto.hive.vehicle_state.HVACState.SeatState|undefined} value */
proto.hive.vehicle_state.HVACState.prototype.setFrontLeft = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hive.vehicle_state.HVACState.prototype.clearFrontLeft = function() {
  this.setFrontLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.HVACState.prototype.hasFrontLeft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SeatState front_right = 3;
 * @return {?proto.hive.vehicle_state.HVACState.SeatState}
 */
proto.hive.vehicle_state.HVACState.prototype.getFrontRight = function() {
  return /** @type{?proto.hive.vehicle_state.HVACState.SeatState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.HVACState.SeatState, 3));
};


/** @param {?proto.hive.vehicle_state.HVACState.SeatState|undefined} value */
proto.hive.vehicle_state.HVACState.prototype.setFrontRight = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hive.vehicle_state.HVACState.prototype.clearFrontRight = function() {
  this.setFrontRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.HVACState.prototype.hasFrontRight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SeatState back_left = 4;
 * @return {?proto.hive.vehicle_state.HVACState.SeatState}
 */
proto.hive.vehicle_state.HVACState.prototype.getBackLeft = function() {
  return /** @type{?proto.hive.vehicle_state.HVACState.SeatState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.HVACState.SeatState, 4));
};


/** @param {?proto.hive.vehicle_state.HVACState.SeatState|undefined} value */
proto.hive.vehicle_state.HVACState.prototype.setBackLeft = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hive.vehicle_state.HVACState.prototype.clearBackLeft = function() {
  this.setBackLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.HVACState.prototype.hasBackLeft = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SeatState back_right = 5;
 * @return {?proto.hive.vehicle_state.HVACState.SeatState}
 */
proto.hive.vehicle_state.HVACState.prototype.getBackRight = function() {
  return /** @type{?proto.hive.vehicle_state.HVACState.SeatState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.HVACState.SeatState, 5));
};


/** @param {?proto.hive.vehicle_state.HVACState.SeatState|undefined} value */
proto.hive.vehicle_state.HVACState.prototype.setBackRight = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hive.vehicle_state.HVACState.prototype.clearBackRight = function() {
  this.setBackRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.HVACState.prototype.hasBackRight = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.VehicleLightsState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.VehicleLightsState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.VehicleLightsState.displayName = 'proto.hive.vehicle_state.VehicleLightsState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.VehicleLightsState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.VehicleLightsState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.VehicleLightsState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleLightsState.toObject = function(includeInstance, msg) {
  var f, obj = {
    headlightsState: (f = msg.getHeadlightsState()) && proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.toObject(includeInstance, f),
    taillightsState: (f = msg.getTaillightsState()) && proto.hive.vehicle_state.VehicleLightsState.TaillightsState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.VehicleLightsState}
 */
proto.hive.vehicle_state.VehicleLightsState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.VehicleLightsState;
  return proto.hive.vehicle_state.VehicleLightsState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.VehicleLightsState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.VehicleLightsState}
 */
proto.hive.vehicle_state.VehicleLightsState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.vehicle_state.VehicleLightsState.HeadlightsState;
      reader.readMessage(value,proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.deserializeBinaryFromReader);
      msg.setHeadlightsState(value);
      break;
    case 2:
      var value = new proto.hive.vehicle_state.VehicleLightsState.TaillightsState;
      reader.readMessage(value,proto.hive.vehicle_state.VehicleLightsState.TaillightsState.deserializeBinaryFromReader);
      msg.setTaillightsState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.VehicleLightsState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.VehicleLightsState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.VehicleLightsState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleLightsState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadlightsState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.serializeBinaryToWriter
    );
  }
  f = message.getTaillightsState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hive.vehicle_state.VehicleLightsState.TaillightsState.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState = {
  UNSET: 0,
  ON: 1,
  OFF: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.VehicleLightsState.HeadlightsState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.displayName = 'proto.hive.vehicle_state.VehicleLightsState.HeadlightsState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.VehicleLightsState.HeadlightsState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontLeftDrl: jspb.Message.getFieldWithDefault(msg, 1, 0),
    frontLeftBlinker: jspb.Message.getFieldWithDefault(msg, 2, 0),
    frontLeftHigh: jspb.Message.getFieldWithDefault(msg, 3, 0),
    frontLeftLow: jspb.Message.getFieldWithDefault(msg, 4, 0),
    frontRightDrl: jspb.Message.getFieldWithDefault(msg, 5, 0),
    frontRightBlinker: jspb.Message.getFieldWithDefault(msg, 6, 0),
    frontRightHigh: jspb.Message.getFieldWithDefault(msg, 7, 0),
    frontRightLow: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.VehicleLightsState.HeadlightsState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.VehicleLightsState.HeadlightsState;
  return proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.VehicleLightsState.HeadlightsState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.VehicleLightsState.HeadlightsState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setFrontLeftDrl(value);
      break;
    case 2:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setFrontLeftBlinker(value);
      break;
    case 3:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setFrontLeftHigh(value);
      break;
    case 4:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setFrontLeftLow(value);
      break;
    case 5:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setFrontRightDrl(value);
      break;
    case 6:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setFrontRightBlinker(value);
      break;
    case 7:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setFrontRightHigh(value);
      break;
    case 8:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setFrontRightLow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.VehicleLightsState.HeadlightsState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrontLeftDrl();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFrontLeftBlinker();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFrontLeftHigh();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFrontLeftLow();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFrontRightDrl();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getFrontRightBlinker();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getFrontRightHigh();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getFrontRightLow();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional ExteriorLightState front_left_drl = 1;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.getFrontLeftDrl = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.setFrontLeftDrl = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ExteriorLightState front_left_blinker = 2;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.getFrontLeftBlinker = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.setFrontLeftBlinker = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ExteriorLightState front_left_high = 3;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.getFrontLeftHigh = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.setFrontLeftHigh = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional ExteriorLightState front_left_low = 4;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.getFrontLeftLow = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.setFrontLeftLow = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ExteriorLightState front_right_drl = 5;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.getFrontRightDrl = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.setFrontRightDrl = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional ExteriorLightState front_right_blinker = 6;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.getFrontRightBlinker = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.setFrontRightBlinker = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional ExteriorLightState front_right_high = 7;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.getFrontRightHigh = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.setFrontRightHigh = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional ExteriorLightState front_right_low = 8;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.getFrontRightLow = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.HeadlightsState.prototype.setFrontRightLow = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.VehicleLightsState.TaillightsState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.VehicleLightsState.TaillightsState.displayName = 'proto.hive.vehicle_state.VehicleLightsState.TaillightsState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.VehicleLightsState.TaillightsState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.VehicleLightsState.TaillightsState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.toObject = function(includeInstance, msg) {
  var f, obj = {
    backLeftDrl: jspb.Message.getFieldWithDefault(msg, 1, 0),
    backLeftBlinker: jspb.Message.getFieldWithDefault(msg, 2, 0),
    backLeftBrake: jspb.Message.getFieldWithDefault(msg, 3, 0),
    backRightDrl: jspb.Message.getFieldWithDefault(msg, 4, 0),
    backRightBlinker: jspb.Message.getFieldWithDefault(msg, 5, 0),
    backRightBrake: jspb.Message.getFieldWithDefault(msg, 6, 0),
    backCenterFog: jspb.Message.getFieldWithDefault(msg, 7, 0),
    backCenterReverse: jspb.Message.getFieldWithDefault(msg, 8, 0),
    backCenterLeftDrl: jspb.Message.getFieldWithDefault(msg, 9, 0),
    backCenterRightDrl: jspb.Message.getFieldWithDefault(msg, 10, 0),
    backCenterLeftBrake: jspb.Message.getFieldWithDefault(msg, 11, 0),
    backCenterRightBrake: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.VehicleLightsState.TaillightsState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.VehicleLightsState.TaillightsState;
  return proto.hive.vehicle_state.VehicleLightsState.TaillightsState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.VehicleLightsState.TaillightsState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.VehicleLightsState.TaillightsState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackLeftDrl(value);
      break;
    case 2:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackLeftBlinker(value);
      break;
    case 3:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackLeftBrake(value);
      break;
    case 4:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackRightDrl(value);
      break;
    case 5:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackRightBlinker(value);
      break;
    case 6:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackRightBrake(value);
      break;
    case 7:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackCenterFog(value);
      break;
    case 8:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackCenterReverse(value);
      break;
    case 9:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackCenterLeftDrl(value);
      break;
    case 10:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackCenterRightDrl(value);
      break;
    case 11:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackCenterLeftBrake(value);
      break;
    case 12:
      var value = /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (reader.readEnum());
      msg.setBackCenterRightBrake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.VehicleLightsState.TaillightsState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.VehicleLightsState.TaillightsState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackLeftDrl();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBackLeftBlinker();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBackLeftBrake();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getBackRightDrl();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getBackRightBlinker();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getBackRightBrake();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getBackCenterFog();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getBackCenterReverse();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getBackCenterLeftDrl();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getBackCenterRightDrl();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getBackCenterLeftBrake();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getBackCenterRightBrake();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional ExteriorLightState back_left_drl = 1;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackLeftDrl = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackLeftDrl = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ExteriorLightState back_left_blinker = 2;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackLeftBlinker = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackLeftBlinker = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ExteriorLightState back_left_brake = 3;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackLeftBrake = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackLeftBrake = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional ExteriorLightState back_right_drl = 4;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackRightDrl = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackRightDrl = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ExteriorLightState back_right_blinker = 5;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackRightBlinker = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackRightBlinker = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional ExteriorLightState back_right_brake = 6;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackRightBrake = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackRightBrake = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional ExteriorLightState back_center_fog = 7;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackCenterFog = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackCenterFog = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional ExteriorLightState back_center_reverse = 8;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackCenterReverse = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackCenterReverse = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional ExteriorLightState back_center_left_drl = 9;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackCenterLeftDrl = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackCenterLeftDrl = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional ExteriorLightState back_center_right_drl = 10;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackCenterRightDrl = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackCenterRightDrl = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional ExteriorLightState back_center_left_brake = 11;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackCenterLeftBrake = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackCenterLeftBrake = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional ExteriorLightState back_center_right_brake = 12;
 * @return {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState}
 */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.getBackCenterRightBrake = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleLightsState.ExteriorLightState} value */
proto.hive.vehicle_state.VehicleLightsState.TaillightsState.prototype.setBackCenterRightBrake = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional HeadlightsState headlights_state = 1;
 * @return {?proto.hive.vehicle_state.VehicleLightsState.HeadlightsState}
 */
proto.hive.vehicle_state.VehicleLightsState.prototype.getHeadlightsState = function() {
  return /** @type{?proto.hive.vehicle_state.VehicleLightsState.HeadlightsState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.VehicleLightsState.HeadlightsState, 1));
};


/** @param {?proto.hive.vehicle_state.VehicleLightsState.HeadlightsState|undefined} value */
proto.hive.vehicle_state.VehicleLightsState.prototype.setHeadlightsState = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hive.vehicle_state.VehicleLightsState.prototype.clearHeadlightsState = function() {
  this.setHeadlightsState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleLightsState.prototype.hasHeadlightsState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TaillightsState taillights_state = 2;
 * @return {?proto.hive.vehicle_state.VehicleLightsState.TaillightsState}
 */
proto.hive.vehicle_state.VehicleLightsState.prototype.getTaillightsState = function() {
  return /** @type{?proto.hive.vehicle_state.VehicleLightsState.TaillightsState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.VehicleLightsState.TaillightsState, 2));
};


/** @param {?proto.hive.vehicle_state.VehicleLightsState.TaillightsState|undefined} value */
proto.hive.vehicle_state.VehicleLightsState.prototype.setTaillightsState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hive.vehicle_state.VehicleLightsState.prototype.clearTaillightsState = function() {
  this.setTaillightsState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleLightsState.prototype.hasTaillightsState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.VehicleCamerasState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.VehicleCamerasState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.VehicleCamerasState.displayName = 'proto.hive.vehicle_state.VehicleCamerasState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.VehicleCamerasState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.VehicleCamerasState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleCamerasState.toObject = function(includeInstance, msg) {
  var f, obj = {
    leftSideCameraState: (f = msg.getLeftSideCameraState()) && proto.hive.vehicle_state.CameraState.toObject(includeInstance, f),
    rightSideCameraState: (f = msg.getRightSideCameraState()) && proto.hive.vehicle_state.CameraState.toObject(includeInstance, f),
    frontCameraState: (f = msg.getFrontCameraState()) && proto.hive.vehicle_state.CameraState.toObject(includeInstance, f),
    rearCameraState: (f = msg.getRearCameraState()) && proto.hive.vehicle_state.CameraState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.VehicleCamerasState}
 */
proto.hive.vehicle_state.VehicleCamerasState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.VehicleCamerasState;
  return proto.hive.vehicle_state.VehicleCamerasState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.VehicleCamerasState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.VehicleCamerasState}
 */
proto.hive.vehicle_state.VehicleCamerasState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.vehicle_state.CameraState;
      reader.readMessage(value,proto.hive.vehicle_state.CameraState.deserializeBinaryFromReader);
      msg.setLeftSideCameraState(value);
      break;
    case 2:
      var value = new proto.hive.vehicle_state.CameraState;
      reader.readMessage(value,proto.hive.vehicle_state.CameraState.deserializeBinaryFromReader);
      msg.setRightSideCameraState(value);
      break;
    case 3:
      var value = new proto.hive.vehicle_state.CameraState;
      reader.readMessage(value,proto.hive.vehicle_state.CameraState.deserializeBinaryFromReader);
      msg.setFrontCameraState(value);
      break;
    case 4:
      var value = new proto.hive.vehicle_state.CameraState;
      reader.readMessage(value,proto.hive.vehicle_state.CameraState.deserializeBinaryFromReader);
      msg.setRearCameraState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.VehicleCamerasState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.VehicleCamerasState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleCamerasState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeftSideCameraState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.vehicle_state.CameraState.serializeBinaryToWriter
    );
  }
  f = message.getRightSideCameraState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hive.vehicle_state.CameraState.serializeBinaryToWriter
    );
  }
  f = message.getFrontCameraState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hive.vehicle_state.CameraState.serializeBinaryToWriter
    );
  }
  f = message.getRearCameraState();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hive.vehicle_state.CameraState.serializeBinaryToWriter
    );
  }
};


/**
 * optional CameraState left_side_camera_state = 1;
 * @return {?proto.hive.vehicle_state.CameraState}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.getLeftSideCameraState = function() {
  return /** @type{?proto.hive.vehicle_state.CameraState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.CameraState, 1));
};


/** @param {?proto.hive.vehicle_state.CameraState|undefined} value */
proto.hive.vehicle_state.VehicleCamerasState.prototype.setLeftSideCameraState = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hive.vehicle_state.VehicleCamerasState.prototype.clearLeftSideCameraState = function() {
  this.setLeftSideCameraState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.hasLeftSideCameraState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CameraState right_side_camera_state = 2;
 * @return {?proto.hive.vehicle_state.CameraState}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.getRightSideCameraState = function() {
  return /** @type{?proto.hive.vehicle_state.CameraState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.CameraState, 2));
};


/** @param {?proto.hive.vehicle_state.CameraState|undefined} value */
proto.hive.vehicle_state.VehicleCamerasState.prototype.setRightSideCameraState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hive.vehicle_state.VehicleCamerasState.prototype.clearRightSideCameraState = function() {
  this.setRightSideCameraState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.hasRightSideCameraState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CameraState front_camera_state = 3;
 * @return {?proto.hive.vehicle_state.CameraState}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.getFrontCameraState = function() {
  return /** @type{?proto.hive.vehicle_state.CameraState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.CameraState, 3));
};


/** @param {?proto.hive.vehicle_state.CameraState|undefined} value */
proto.hive.vehicle_state.VehicleCamerasState.prototype.setFrontCameraState = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hive.vehicle_state.VehicleCamerasState.prototype.clearFrontCameraState = function() {
  this.setFrontCameraState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.hasFrontCameraState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CameraState rear_camera_state = 4;
 * @return {?proto.hive.vehicle_state.CameraState}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.getRearCameraState = function() {
  return /** @type{?proto.hive.vehicle_state.CameraState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.CameraState, 4));
};


/** @param {?proto.hive.vehicle_state.CameraState|undefined} value */
proto.hive.vehicle_state.VehicleCamerasState.prototype.setRearCameraState = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hive.vehicle_state.VehicleCamerasState.prototype.clearRearCameraState = function() {
  this.setRearCameraState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleCamerasState.prototype.hasRearCameraState = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.TargetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.TargetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.TargetInfo.displayName = 'proto.hive.vehicle_state.TargetInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.TargetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.TargetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.TargetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.TargetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthStatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    board: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.TargetInfo}
 */
proto.hive.vehicle_state.TargetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.TargetInfo;
  return proto.hive.vehicle_state.TargetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.TargetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.TargetInfo}
 */
proto.hive.vehicle_state.TargetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.TargetInfo.HealthStatus} */ (reader.readEnum());
      msg.setHealthStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.TargetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.TargetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.TargetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.TargetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealthStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBoard();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.TargetInfo.HealthStatus = {
  UNSET: 0,
  HEALTHY: 1,
  UNHEALTHY: 2
};

/**
 * optional HealthStatus health_status = 1;
 * @return {!proto.hive.vehicle_state.TargetInfo.HealthStatus}
 */
proto.hive.vehicle_state.TargetInfo.prototype.getHealthStatus = function() {
  return /** @type {!proto.hive.vehicle_state.TargetInfo.HealthStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.TargetInfo.HealthStatus} value */
proto.hive.vehicle_state.TargetInfo.prototype.setHealthStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.hive.vehicle_state.TargetInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.hive.vehicle_state.TargetInfo.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string board = 3;
 * @return {string}
 */
proto.hive.vehicle_state.TargetInfo.prototype.getBoard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hive.vehicle_state.TargetInfo.prototype.setBoard = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.TargetsState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.TargetsState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.TargetsState.displayName = 'proto.hive.vehicle_state.TargetsState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.TargetsState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.TargetsState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.TargetsState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.TargetsState.toObject = function(includeInstance, msg) {
  var f, obj = {
    nameToTargetInfoMapMap: (f = msg.getNameToTargetInfoMapMap()) ? f.toObject(includeInstance, proto.hive.vehicle_state.TargetInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.TargetsState}
 */
proto.hive.vehicle_state.TargetsState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.TargetsState;
  return proto.hive.vehicle_state.TargetsState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.TargetsState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.TargetsState}
 */
proto.hive.vehicle_state.TargetsState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getNameToTargetInfoMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.hive.vehicle_state.TargetInfo.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.TargetsState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.TargetsState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.TargetsState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.TargetsState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameToTargetInfoMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.hive.vehicle_state.TargetInfo.serializeBinaryToWriter);
  }
};


/**
 * map<string, TargetInfo> name_to_target_info_map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.hive.vehicle_state.TargetInfo>}
 */
proto.hive.vehicle_state.TargetsState.prototype.getNameToTargetInfoMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.hive.vehicle_state.TargetInfo>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.hive.vehicle_state.TargetInfo));
};


proto.hive.vehicle_state.TargetsState.prototype.clearNameToTargetInfoMapMap = function() {
  this.getNameToTargetInfoMapMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.VehicleDoorsState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.VehicleDoorsState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.VehicleDoorsState.displayName = 'proto.hive.vehicle_state.VehicleDoorsState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.VehicleDoorsState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.VehicleDoorsState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleDoorsState.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontLeft: (f = msg.getFrontLeft()) && proto.hive.vehicle_state.DoorState.toObject(includeInstance, f),
    frontRight: (f = msg.getFrontRight()) && proto.hive.vehicle_state.DoorState.toObject(includeInstance, f),
    backLeft: (f = msg.getBackLeft()) && proto.hive.vehicle_state.DoorState.toObject(includeInstance, f),
    backRight: (f = msg.getBackRight()) && proto.hive.vehicle_state.DoorState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.VehicleDoorsState}
 */
proto.hive.vehicle_state.VehicleDoorsState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.VehicleDoorsState;
  return proto.hive.vehicle_state.VehicleDoorsState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.VehicleDoorsState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.VehicleDoorsState}
 */
proto.hive.vehicle_state.VehicleDoorsState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.vehicle_state.DoorState;
      reader.readMessage(value,proto.hive.vehicle_state.DoorState.deserializeBinaryFromReader);
      msg.setFrontLeft(value);
      break;
    case 2:
      var value = new proto.hive.vehicle_state.DoorState;
      reader.readMessage(value,proto.hive.vehicle_state.DoorState.deserializeBinaryFromReader);
      msg.setFrontRight(value);
      break;
    case 3:
      var value = new proto.hive.vehicle_state.DoorState;
      reader.readMessage(value,proto.hive.vehicle_state.DoorState.deserializeBinaryFromReader);
      msg.setBackLeft(value);
      break;
    case 4:
      var value = new proto.hive.vehicle_state.DoorState;
      reader.readMessage(value,proto.hive.vehicle_state.DoorState.deserializeBinaryFromReader);
      msg.setBackRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.VehicleDoorsState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.VehicleDoorsState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleDoorsState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrontLeft();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.vehicle_state.DoorState.serializeBinaryToWriter
    );
  }
  f = message.getFrontRight();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hive.vehicle_state.DoorState.serializeBinaryToWriter
    );
  }
  f = message.getBackLeft();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hive.vehicle_state.DoorState.serializeBinaryToWriter
    );
  }
  f = message.getBackRight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hive.vehicle_state.DoorState.serializeBinaryToWriter
    );
  }
};


/**
 * optional DoorState front_left = 1;
 * @return {?proto.hive.vehicle_state.DoorState}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.getFrontLeft = function() {
  return /** @type{?proto.hive.vehicle_state.DoorState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.DoorState, 1));
};


/** @param {?proto.hive.vehicle_state.DoorState|undefined} value */
proto.hive.vehicle_state.VehicleDoorsState.prototype.setFrontLeft = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hive.vehicle_state.VehicleDoorsState.prototype.clearFrontLeft = function() {
  this.setFrontLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.hasFrontLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DoorState front_right = 2;
 * @return {?proto.hive.vehicle_state.DoorState}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.getFrontRight = function() {
  return /** @type{?proto.hive.vehicle_state.DoorState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.DoorState, 2));
};


/** @param {?proto.hive.vehicle_state.DoorState|undefined} value */
proto.hive.vehicle_state.VehicleDoorsState.prototype.setFrontRight = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hive.vehicle_state.VehicleDoorsState.prototype.clearFrontRight = function() {
  this.setFrontRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.hasFrontRight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DoorState back_left = 3;
 * @return {?proto.hive.vehicle_state.DoorState}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.getBackLeft = function() {
  return /** @type{?proto.hive.vehicle_state.DoorState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.DoorState, 3));
};


/** @param {?proto.hive.vehicle_state.DoorState|undefined} value */
proto.hive.vehicle_state.VehicleDoorsState.prototype.setBackLeft = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hive.vehicle_state.VehicleDoorsState.prototype.clearBackLeft = function() {
  this.setBackLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.hasBackLeft = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DoorState back_right = 4;
 * @return {?proto.hive.vehicle_state.DoorState}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.getBackRight = function() {
  return /** @type{?proto.hive.vehicle_state.DoorState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.DoorState, 4));
};


/** @param {?proto.hive.vehicle_state.DoorState|undefined} value */
proto.hive.vehicle_state.VehicleDoorsState.prototype.setBackRight = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hive.vehicle_state.VehicleDoorsState.prototype.clearBackRight = function() {
  this.setBackRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleDoorsState.prototype.hasBackRight = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.VehicleTiresState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.VehicleTiresState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.VehicleTiresState.displayName = 'proto.hive.vehicle_state.VehicleTiresState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.VehicleTiresState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.VehicleTiresState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleTiresState.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontLeft: (f = msg.getFrontLeft()) && proto.hive.vehicle_state.TireState.toObject(includeInstance, f),
    frontRight: (f = msg.getFrontRight()) && proto.hive.vehicle_state.TireState.toObject(includeInstance, f),
    backLeft: (f = msg.getBackLeft()) && proto.hive.vehicle_state.TireState.toObject(includeInstance, f),
    backRight: (f = msg.getBackRight()) && proto.hive.vehicle_state.TireState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.VehicleTiresState}
 */
proto.hive.vehicle_state.VehicleTiresState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.VehicleTiresState;
  return proto.hive.vehicle_state.VehicleTiresState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.VehicleTiresState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.VehicleTiresState}
 */
proto.hive.vehicle_state.VehicleTiresState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.vehicle_state.TireState;
      reader.readMessage(value,proto.hive.vehicle_state.TireState.deserializeBinaryFromReader);
      msg.setFrontLeft(value);
      break;
    case 2:
      var value = new proto.hive.vehicle_state.TireState;
      reader.readMessage(value,proto.hive.vehicle_state.TireState.deserializeBinaryFromReader);
      msg.setFrontRight(value);
      break;
    case 3:
      var value = new proto.hive.vehicle_state.TireState;
      reader.readMessage(value,proto.hive.vehicle_state.TireState.deserializeBinaryFromReader);
      msg.setBackLeft(value);
      break;
    case 4:
      var value = new proto.hive.vehicle_state.TireState;
      reader.readMessage(value,proto.hive.vehicle_state.TireState.deserializeBinaryFromReader);
      msg.setBackRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.VehicleTiresState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.VehicleTiresState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleTiresState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrontLeft();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.vehicle_state.TireState.serializeBinaryToWriter
    );
  }
  f = message.getFrontRight();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hive.vehicle_state.TireState.serializeBinaryToWriter
    );
  }
  f = message.getBackLeft();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hive.vehicle_state.TireState.serializeBinaryToWriter
    );
  }
  f = message.getBackRight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.hive.vehicle_state.TireState.serializeBinaryToWriter
    );
  }
};


/**
 * optional TireState front_left = 1;
 * @return {?proto.hive.vehicle_state.TireState}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.getFrontLeft = function() {
  return /** @type{?proto.hive.vehicle_state.TireState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.TireState, 1));
};


/** @param {?proto.hive.vehicle_state.TireState|undefined} value */
proto.hive.vehicle_state.VehicleTiresState.prototype.setFrontLeft = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hive.vehicle_state.VehicleTiresState.prototype.clearFrontLeft = function() {
  this.setFrontLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.hasFrontLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TireState front_right = 2;
 * @return {?proto.hive.vehicle_state.TireState}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.getFrontRight = function() {
  return /** @type{?proto.hive.vehicle_state.TireState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.TireState, 2));
};


/** @param {?proto.hive.vehicle_state.TireState|undefined} value */
proto.hive.vehicle_state.VehicleTiresState.prototype.setFrontRight = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hive.vehicle_state.VehicleTiresState.prototype.clearFrontRight = function() {
  this.setFrontRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.hasFrontRight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TireState back_left = 3;
 * @return {?proto.hive.vehicle_state.TireState}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.getBackLeft = function() {
  return /** @type{?proto.hive.vehicle_state.TireState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.TireState, 3));
};


/** @param {?proto.hive.vehicle_state.TireState|undefined} value */
proto.hive.vehicle_state.VehicleTiresState.prototype.setBackLeft = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hive.vehicle_state.VehicleTiresState.prototype.clearBackLeft = function() {
  this.setBackLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.hasBackLeft = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TireState back_right = 4;
 * @return {?proto.hive.vehicle_state.TireState}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.getBackRight = function() {
  return /** @type{?proto.hive.vehicle_state.TireState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.TireState, 4));
};


/** @param {?proto.hive.vehicle_state.TireState|undefined} value */
proto.hive.vehicle_state.VehicleTiresState.prototype.setBackRight = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hive.vehicle_state.VehicleTiresState.prototype.clearBackRight = function() {
  this.setBackRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleTiresState.prototype.hasBackRight = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.TireState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.TireState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.TireState.displayName = 'proto.hive.vehicle_state.TireState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.TireState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.TireState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.TireState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.TireState.toObject = function(includeInstance, msg) {
  var f, obj = {
    tirePressureBar: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.TireState}
 */
proto.hive.vehicle_state.TireState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.TireState;
  return proto.hive.vehicle_state.TireState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.TireState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.TireState}
 */
proto.hive.vehicle_state.TireState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTirePressureBar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.TireState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.TireState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.TireState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.TireState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTirePressureBar();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float tire_pressure_bar = 1;
 * @return {number}
 */
proto.hive.vehicle_state.TireState.prototype.getTirePressureBar = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.hive.vehicle_state.TireState.prototype.setTirePressureBar = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.SentryModeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.SentryModeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.SentryModeState.displayName = 'proto.hive.vehicle_state.SentryModeState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.SentryModeState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.SentryModeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.SentryModeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.SentryModeState.toObject = function(includeInstance, msg) {
  var f, obj = {
    isEnabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    sentryModeStatus: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.SentryModeState}
 */
proto.hive.vehicle_state.SentryModeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.SentryModeState;
  return proto.hive.vehicle_state.SentryModeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.SentryModeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.SentryModeState}
 */
proto.hive.vehicle_state.SentryModeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.hive.vehicle_state.SentryModeState.Status} */ (reader.readEnum());
      msg.setSentryModeStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.SentryModeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.SentryModeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.SentryModeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.SentryModeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSentryModeStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.SentryModeState.Status = {
  UNSET: 0,
  STANDBY: 1,
  ALERT: 2,
  ALARM: 3,
  OFF: 4
};

/**
 * optional bool is_enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hive.vehicle_state.SentryModeState.prototype.getIsEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.hive.vehicle_state.SentryModeState.prototype.setIsEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Status sentry_mode_status = 2;
 * @return {!proto.hive.vehicle_state.SentryModeState.Status}
 */
proto.hive.vehicle_state.SentryModeState.prototype.getSentryModeStatus = function() {
  return /** @type {!proto.hive.vehicle_state.SentryModeState.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hive.vehicle_state.SentryModeState.Status} value */
proto.hive.vehicle_state.SentryModeState.prototype.setSentryModeStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.ValetModeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.ValetModeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.ValetModeState.displayName = 'proto.hive.vehicle_state.ValetModeState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.ValetModeState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.ValetModeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.ValetModeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.ValetModeState.toObject = function(includeInstance, msg) {
  var f, obj = {
    valetModeStatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.ValetModeState}
 */
proto.hive.vehicle_state.ValetModeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.ValetModeState;
  return proto.hive.vehicle_state.ValetModeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.ValetModeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.ValetModeState}
 */
proto.hive.vehicle_state.ValetModeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.ValetModeState.Status} */ (reader.readEnum());
      msg.setValetModeStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.ValetModeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.ValetModeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.ValetModeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.ValetModeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValetModeStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.ValetModeState.Status = {
  UNSET: 0,
  OFF: 1,
  ON: 2,
  LOCKED: 3
};

/**
 * optional Status valet_mode_status = 1;
 * @return {!proto.hive.vehicle_state.ValetModeState.Status}
 */
proto.hive.vehicle_state.ValetModeState.prototype.getValetModeStatus = function() {
  return /** @type {!proto.hive.vehicle_state.ValetModeState.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.ValetModeState.Status} value */
proto.hive.vehicle_state.ValetModeState.prototype.setValetModeStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.DriveModeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.DriveModeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.DriveModeState.displayName = 'proto.hive.vehicle_state.DriveModeState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.DriveModeState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.DriveModeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.DriveModeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.DriveModeState.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.DriveModeState}
 */
proto.hive.vehicle_state.DriveModeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.DriveModeState;
  return proto.hive.vehicle_state.DriveModeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.DriveModeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.DriveModeState}
 */
proto.hive.vehicle_state.DriveModeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.DriveModeState.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.DriveModeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.DriveModeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.DriveModeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.DriveModeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.DriveModeState.Mode = {
  UNSET: 0,
  NORMAL: 1,
  ECO: 2,
  SPORT: 3,
  RACETRACK: 4
};

/**
 * optional Mode mode = 1;
 * @return {!proto.hive.vehicle_state.DriveModeState.Mode}
 */
proto.hive.vehicle_state.DriveModeState.prototype.getMode = function() {
  return /** @type {!proto.hive.vehicle_state.DriveModeState.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.DriveModeState.Mode} value */
proto.hive.vehicle_state.DriveModeState.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.VehicleOperatingState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.VehicleOperatingState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.VehicleOperatingState.displayName = 'proto.hive.vehicle_state.VehicleOperatingState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.VehicleOperatingState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.VehicleOperatingState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.VehicleOperatingState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleOperatingState.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatingState: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transitionStatus: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.VehicleOperatingState}
 */
proto.hive.vehicle_state.VehicleOperatingState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.VehicleOperatingState;
  return proto.hive.vehicle_state.VehicleOperatingState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.VehicleOperatingState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.VehicleOperatingState}
 */
proto.hive.vehicle_state.VehicleOperatingState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.VehicleOperatingState.OperatingState} */ (reader.readEnum());
      msg.setOperatingState(value);
      break;
    case 2:
      var value = /** @type {!proto.hive.vehicle_state.VehicleOperatingState.TransitionStatus} */ (reader.readEnum());
      msg.setTransitionStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.VehicleOperatingState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.VehicleOperatingState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.VehicleOperatingState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleOperatingState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperatingState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTransitionStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.VehicleOperatingState.OperatingState = {
  OPERATING_UNSET: 0,
  DEEP_SLEEP: 1,
  SLEEP: 2,
  ACCESSORY_READY: 3,
  ACCESSORY: 4,
  DRIVE_READY: 5,
  DRIVE: 6,
  SLEEP_ACTIVE_OTA: 7,
  SLEEP_ACTIVE_SENTRY: 8,
  SLEEP_ACTIVE_REMOTE: 9
};

/**
 * @enum {number}
 */
proto.hive.vehicle_state.VehicleOperatingState.TransitionStatus = {
  TRANSITIONING_UNSET: 0,
  NOT_TRANSITIONING: 1,
  TRANSITIONING: 2,
  UNKNOWN: 3
};

/**
 * optional OperatingState operating_state = 1;
 * @return {!proto.hive.vehicle_state.VehicleOperatingState.OperatingState}
 */
proto.hive.vehicle_state.VehicleOperatingState.prototype.getOperatingState = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleOperatingState.OperatingState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleOperatingState.OperatingState} value */
proto.hive.vehicle_state.VehicleOperatingState.prototype.setOperatingState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TransitionStatus transition_status = 2;
 * @return {!proto.hive.vehicle_state.VehicleOperatingState.TransitionStatus}
 */
proto.hive.vehicle_state.VehicleOperatingState.prototype.getTransitionStatus = function() {
  return /** @type {!proto.hive.vehicle_state.VehicleOperatingState.TransitionStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hive.vehicle_state.VehicleOperatingState.TransitionStatus} value */
proto.hive.vehicle_state.VehicleOperatingState.prototype.setTransitionStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.TurnSignalState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.TurnSignalState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.TurnSignalState.displayName = 'proto.hive.vehicle_state.TurnSignalState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.TurnSignalState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.TurnSignalState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.TurnSignalState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.TurnSignalState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.TurnSignalState}
 */
proto.hive.vehicle_state.TurnSignalState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.TurnSignalState;
  return proto.hive.vehicle_state.TurnSignalState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.TurnSignalState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.TurnSignalState}
 */
proto.hive.vehicle_state.TurnSignalState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hive.vehicle_state.TurnSignalState.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.TurnSignalState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.TurnSignalState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.TurnSignalState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.TurnSignalState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hive.vehicle_state.TurnSignalState.State = {
  UNSET: 0,
  INACTIVE: 1,
  SIGNALLING_LEFT: 2,
  SIGNALLING_RIGHT: 3
};

/**
 * optional State state = 1;
 * @return {!proto.hive.vehicle_state.TurnSignalState.State}
 */
proto.hive.vehicle_state.TurnSignalState.prototype.getState = function() {
  return /** @type {!proto.hive.vehicle_state.TurnSignalState.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hive.vehicle_state.TurnSignalState.State} value */
proto.hive.vehicle_state.TurnSignalState.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.ThermalManagementState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.ThermalManagementState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.ThermalManagementState.displayName = 'proto.hive.vehicle_state.ThermalManagementState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.ThermalManagementState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.ThermalManagementState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.ThermalManagementState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.ThermalManagementState.toObject = function(includeInstance, msg) {
  var f, obj = {
    fanRpm: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.ThermalManagementState}
 */
proto.hive.vehicle_state.ThermalManagementState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.ThermalManagementState;
  return proto.hive.vehicle_state.ThermalManagementState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.ThermalManagementState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.ThermalManagementState}
 */
proto.hive.vehicle_state.ThermalManagementState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFanRpm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.ThermalManagementState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.ThermalManagementState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.ThermalManagementState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.ThermalManagementState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFanRpm();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 fan_rpm = 1;
 * @return {number}
 */
proto.hive.vehicle_state.ThermalManagementState.prototype.getFanRpm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hive.vehicle_state.ThermalManagementState.prototype.setFanRpm = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.SpoilerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.SpoilerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.SpoilerState.displayName = 'proto.hive.vehicle_state.SpoilerState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.SpoilerState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.SpoilerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.SpoilerState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.SpoilerState.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.SpoilerState}
 */
proto.hive.vehicle_state.SpoilerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.SpoilerState;
  return proto.hive.vehicle_state.SpoilerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.SpoilerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.SpoilerState}
 */
proto.hive.vehicle_state.SpoilerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.SpoilerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.SpoilerState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.SpoilerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.SpoilerState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 position = 1;
 * @return {number}
 */
proto.hive.vehicle_state.SpoilerState.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.hive.vehicle_state.SpoilerState.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.vehicle_state.VehicleState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.vehicle_state.VehicleState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hive.vehicle_state.VehicleState.displayName = 'proto.hive.vehicle_state.VehicleState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.vehicle_state.VehicleState.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.vehicle_state.VehicleState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.vehicle_state.VehicleState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleState.toObject = function(includeInstance, msg) {
  var f, obj = {
    doorsLocked: jspb.Message.getFieldWithDefault(msg, 1, false),
    driveState: (f = msg.getDriveState()) && proto.hive.vehicle_state.DriveState.toObject(includeInstance, f),
    doorsState: (f = msg.getDoorsState()) && proto.hive.vehicle_state.VehicleDoorsState.toObject(includeInstance, f),
    timestampUtc: (f = msg.getTimestampUtc()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    chargeState: (f = msg.getChargeState()) && proto.hive.vehicle_state.ChargeState.toObject(includeInstance, f),
    gpsCoordinates: (f = msg.getGpsCoordinates()) && proto.hive.vehicle_state.GPSCoordinates.toObject(includeInstance, f),
    vehicleLightsState: (f = msg.getVehicleLightsState()) && proto.hive.vehicle_state.VehicleLightsState.toObject(includeInstance, f),
    hvacState: (f = msg.getHvacState()) && proto.hive.vehicle_state.HVACState.toObject(includeInstance, f),
    sentryModeState: (f = msg.getSentryModeState()) && proto.hive.vehicle_state.SentryModeState.toObject(includeInstance, f),
    valetModeState: (f = msg.getValetModeState()) && proto.hive.vehicle_state.ValetModeState.toObject(includeInstance, f),
    tiresState: (f = msg.getTiresState()) && proto.hive.vehicle_state.VehicleTiresState.toObject(includeInstance, f),
    driveModeState: (f = msg.getDriveModeState()) && proto.hive.vehicle_state.DriveModeState.toObject(includeInstance, f),
    turnSignalState: (f = msg.getTurnSignalState()) && proto.hive.vehicle_state.TurnSignalState.toObject(includeInstance, f),
    tmeState: (f = msg.getTmeState()) && proto.hive.vehicle_state.ThermalManagementState.toObject(includeInstance, f),
    camerasState: (f = msg.getCamerasState()) && proto.hive.vehicle_state.VehicleCamerasState.toObject(includeInstance, f),
    targetsState: (f = msg.getTargetsState()) && proto.hive.vehicle_state.TargetsState.toObject(includeInstance, f),
    spoilerState: (f = msg.getSpoilerState()) && proto.hive.vehicle_state.SpoilerState.toObject(includeInstance, f),
    vehicleOperatingState: (f = msg.getVehicleOperatingState()) && proto.hive.vehicle_state.VehicleOperatingState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.vehicle_state.VehicleState}
 */
proto.hive.vehicle_state.VehicleState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.vehicle_state.VehicleState;
  return proto.hive.vehicle_state.VehicleState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.vehicle_state.VehicleState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.vehicle_state.VehicleState}
 */
proto.hive.vehicle_state.VehicleState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoorsLocked(value);
      break;
    case 2:
      var value = new proto.hive.vehicle_state.DriveState;
      reader.readMessage(value,proto.hive.vehicle_state.DriveState.deserializeBinaryFromReader);
      msg.setDriveState(value);
      break;
    case 3:
      var value = new proto.hive.vehicle_state.VehicleDoorsState;
      reader.readMessage(value,proto.hive.vehicle_state.VehicleDoorsState.deserializeBinaryFromReader);
      msg.setDoorsState(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestampUtc(value);
      break;
    case 5:
      var value = new proto.hive.vehicle_state.ChargeState;
      reader.readMessage(value,proto.hive.vehicle_state.ChargeState.deserializeBinaryFromReader);
      msg.setChargeState(value);
      break;
    case 6:
      var value = new proto.hive.vehicle_state.GPSCoordinates;
      reader.readMessage(value,proto.hive.vehicle_state.GPSCoordinates.deserializeBinaryFromReader);
      msg.setGpsCoordinates(value);
      break;
    case 7:
      var value = new proto.hive.vehicle_state.VehicleLightsState;
      reader.readMessage(value,proto.hive.vehicle_state.VehicleLightsState.deserializeBinaryFromReader);
      msg.setVehicleLightsState(value);
      break;
    case 8:
      var value = new proto.hive.vehicle_state.HVACState;
      reader.readMessage(value,proto.hive.vehicle_state.HVACState.deserializeBinaryFromReader);
      msg.setHvacState(value);
      break;
    case 9:
      var value = new proto.hive.vehicle_state.SentryModeState;
      reader.readMessage(value,proto.hive.vehicle_state.SentryModeState.deserializeBinaryFromReader);
      msg.setSentryModeState(value);
      break;
    case 10:
      var value = new proto.hive.vehicle_state.ValetModeState;
      reader.readMessage(value,proto.hive.vehicle_state.ValetModeState.deserializeBinaryFromReader);
      msg.setValetModeState(value);
      break;
    case 11:
      var value = new proto.hive.vehicle_state.VehicleTiresState;
      reader.readMessage(value,proto.hive.vehicle_state.VehicleTiresState.deserializeBinaryFromReader);
      msg.setTiresState(value);
      break;
    case 12:
      var value = new proto.hive.vehicle_state.DriveModeState;
      reader.readMessage(value,proto.hive.vehicle_state.DriveModeState.deserializeBinaryFromReader);
      msg.setDriveModeState(value);
      break;
    case 13:
      var value = new proto.hive.vehicle_state.TurnSignalState;
      reader.readMessage(value,proto.hive.vehicle_state.TurnSignalState.deserializeBinaryFromReader);
      msg.setTurnSignalState(value);
      break;
    case 14:
      var value = new proto.hive.vehicle_state.ThermalManagementState;
      reader.readMessage(value,proto.hive.vehicle_state.ThermalManagementState.deserializeBinaryFromReader);
      msg.setTmeState(value);
      break;
    case 15:
      var value = new proto.hive.vehicle_state.VehicleCamerasState;
      reader.readMessage(value,proto.hive.vehicle_state.VehicleCamerasState.deserializeBinaryFromReader);
      msg.setCamerasState(value);
      break;
    case 16:
      var value = new proto.hive.vehicle_state.TargetsState;
      reader.readMessage(value,proto.hive.vehicle_state.TargetsState.deserializeBinaryFromReader);
      msg.setTargetsState(value);
      break;
    case 17:
      var value = new proto.hive.vehicle_state.SpoilerState;
      reader.readMessage(value,proto.hive.vehicle_state.SpoilerState.deserializeBinaryFromReader);
      msg.setSpoilerState(value);
      break;
    case 18:
      var value = new proto.hive.vehicle_state.VehicleOperatingState;
      reader.readMessage(value,proto.hive.vehicle_state.VehicleOperatingState.deserializeBinaryFromReader);
      msg.setVehicleOperatingState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.vehicle_state.VehicleState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.vehicle_state.VehicleState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.vehicle_state.VehicleState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.vehicle_state.VehicleState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDoorsLocked();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDriveState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hive.vehicle_state.DriveState.serializeBinaryToWriter
    );
  }
  f = message.getDoorsState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hive.vehicle_state.VehicleDoorsState.serializeBinaryToWriter
    );
  }
  f = message.getTimestampUtc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getChargeState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.hive.vehicle_state.ChargeState.serializeBinaryToWriter
    );
  }
  f = message.getGpsCoordinates();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.hive.vehicle_state.GPSCoordinates.serializeBinaryToWriter
    );
  }
  f = message.getVehicleLightsState();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.hive.vehicle_state.VehicleLightsState.serializeBinaryToWriter
    );
  }
  f = message.getHvacState();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.hive.vehicle_state.HVACState.serializeBinaryToWriter
    );
  }
  f = message.getSentryModeState();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.hive.vehicle_state.SentryModeState.serializeBinaryToWriter
    );
  }
  f = message.getValetModeState();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.hive.vehicle_state.ValetModeState.serializeBinaryToWriter
    );
  }
  f = message.getTiresState();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.hive.vehicle_state.VehicleTiresState.serializeBinaryToWriter
    );
  }
  f = message.getDriveModeState();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.hive.vehicle_state.DriveModeState.serializeBinaryToWriter
    );
  }
  f = message.getTurnSignalState();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.hive.vehicle_state.TurnSignalState.serializeBinaryToWriter
    );
  }
  f = message.getTmeState();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.hive.vehicle_state.ThermalManagementState.serializeBinaryToWriter
    );
  }
  f = message.getCamerasState();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.hive.vehicle_state.VehicleCamerasState.serializeBinaryToWriter
    );
  }
  f = message.getTargetsState();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.hive.vehicle_state.TargetsState.serializeBinaryToWriter
    );
  }
  f = message.getSpoilerState();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.hive.vehicle_state.SpoilerState.serializeBinaryToWriter
    );
  }
  f = message.getVehicleOperatingState();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.hive.vehicle_state.VehicleOperatingState.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool doors_locked = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.getDoorsLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.hive.vehicle_state.VehicleState.prototype.setDoorsLocked = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional DriveState drive_state = 2;
 * @return {?proto.hive.vehicle_state.DriveState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getDriveState = function() {
  return /** @type{?proto.hive.vehicle_state.DriveState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.DriveState, 2));
};


/** @param {?proto.hive.vehicle_state.DriveState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setDriveState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearDriveState = function() {
  this.setDriveState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasDriveState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VehicleDoorsState doors_state = 3;
 * @return {?proto.hive.vehicle_state.VehicleDoorsState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getDoorsState = function() {
  return /** @type{?proto.hive.vehicle_state.VehicleDoorsState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.VehicleDoorsState, 3));
};


/** @param {?proto.hive.vehicle_state.VehicleDoorsState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setDoorsState = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearDoorsState = function() {
  this.setDoorsState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasDoorsState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp_utc = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.hive.vehicle_state.VehicleState.prototype.getTimestampUtc = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setTimestampUtc = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearTimestampUtc = function() {
  this.setTimestampUtc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasTimestampUtc = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ChargeState charge_state = 5;
 * @return {?proto.hive.vehicle_state.ChargeState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getChargeState = function() {
  return /** @type{?proto.hive.vehicle_state.ChargeState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.ChargeState, 5));
};


/** @param {?proto.hive.vehicle_state.ChargeState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setChargeState = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearChargeState = function() {
  this.setChargeState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasChargeState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GPSCoordinates gps_coordinates = 6;
 * @return {?proto.hive.vehicle_state.GPSCoordinates}
 */
proto.hive.vehicle_state.VehicleState.prototype.getGpsCoordinates = function() {
  return /** @type{?proto.hive.vehicle_state.GPSCoordinates} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.GPSCoordinates, 6));
};


/** @param {?proto.hive.vehicle_state.GPSCoordinates|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setGpsCoordinates = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearGpsCoordinates = function() {
  this.setGpsCoordinates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasGpsCoordinates = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional VehicleLightsState vehicle_lights_state = 7;
 * @return {?proto.hive.vehicle_state.VehicleLightsState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getVehicleLightsState = function() {
  return /** @type{?proto.hive.vehicle_state.VehicleLightsState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.VehicleLightsState, 7));
};


/** @param {?proto.hive.vehicle_state.VehicleLightsState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setVehicleLightsState = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearVehicleLightsState = function() {
  this.setVehicleLightsState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasVehicleLightsState = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional HVACState hvac_state = 8;
 * @return {?proto.hive.vehicle_state.HVACState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getHvacState = function() {
  return /** @type{?proto.hive.vehicle_state.HVACState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.HVACState, 8));
};


/** @param {?proto.hive.vehicle_state.HVACState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setHvacState = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearHvacState = function() {
  this.setHvacState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasHvacState = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SentryModeState sentry_mode_state = 9;
 * @return {?proto.hive.vehicle_state.SentryModeState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getSentryModeState = function() {
  return /** @type{?proto.hive.vehicle_state.SentryModeState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.SentryModeState, 9));
};


/** @param {?proto.hive.vehicle_state.SentryModeState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setSentryModeState = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearSentryModeState = function() {
  this.setSentryModeState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasSentryModeState = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ValetModeState valet_mode_state = 10;
 * @return {?proto.hive.vehicle_state.ValetModeState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getValetModeState = function() {
  return /** @type{?proto.hive.vehicle_state.ValetModeState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.ValetModeState, 10));
};


/** @param {?proto.hive.vehicle_state.ValetModeState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setValetModeState = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearValetModeState = function() {
  this.setValetModeState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasValetModeState = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional VehicleTiresState tires_state = 11;
 * @return {?proto.hive.vehicle_state.VehicleTiresState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getTiresState = function() {
  return /** @type{?proto.hive.vehicle_state.VehicleTiresState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.VehicleTiresState, 11));
};


/** @param {?proto.hive.vehicle_state.VehicleTiresState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setTiresState = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearTiresState = function() {
  this.setTiresState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasTiresState = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional DriveModeState drive_mode_state = 12;
 * @return {?proto.hive.vehicle_state.DriveModeState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getDriveModeState = function() {
  return /** @type{?proto.hive.vehicle_state.DriveModeState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.DriveModeState, 12));
};


/** @param {?proto.hive.vehicle_state.DriveModeState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setDriveModeState = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearDriveModeState = function() {
  this.setDriveModeState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasDriveModeState = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional TurnSignalState turn_signal_state = 13;
 * @return {?proto.hive.vehicle_state.TurnSignalState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getTurnSignalState = function() {
  return /** @type{?proto.hive.vehicle_state.TurnSignalState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.TurnSignalState, 13));
};


/** @param {?proto.hive.vehicle_state.TurnSignalState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setTurnSignalState = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearTurnSignalState = function() {
  this.setTurnSignalState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasTurnSignalState = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ThermalManagementState tme_state = 14;
 * @return {?proto.hive.vehicle_state.ThermalManagementState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getTmeState = function() {
  return /** @type{?proto.hive.vehicle_state.ThermalManagementState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.ThermalManagementState, 14));
};


/** @param {?proto.hive.vehicle_state.ThermalManagementState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setTmeState = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearTmeState = function() {
  this.setTmeState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasTmeState = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional VehicleCamerasState cameras_state = 15;
 * @return {?proto.hive.vehicle_state.VehicleCamerasState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getCamerasState = function() {
  return /** @type{?proto.hive.vehicle_state.VehicleCamerasState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.VehicleCamerasState, 15));
};


/** @param {?proto.hive.vehicle_state.VehicleCamerasState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setCamerasState = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearCamerasState = function() {
  this.setCamerasState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasCamerasState = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional TargetsState targets_state = 16;
 * @return {?proto.hive.vehicle_state.TargetsState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getTargetsState = function() {
  return /** @type{?proto.hive.vehicle_state.TargetsState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.TargetsState, 16));
};


/** @param {?proto.hive.vehicle_state.TargetsState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setTargetsState = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearTargetsState = function() {
  this.setTargetsState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasTargetsState = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SpoilerState spoiler_state = 17;
 * @return {?proto.hive.vehicle_state.SpoilerState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getSpoilerState = function() {
  return /** @type{?proto.hive.vehicle_state.SpoilerState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.SpoilerState, 17));
};


/** @param {?proto.hive.vehicle_state.SpoilerState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setSpoilerState = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearSpoilerState = function() {
  this.setSpoilerState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasSpoilerState = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional VehicleOperatingState vehicle_operating_state = 18;
 * @return {?proto.hive.vehicle_state.VehicleOperatingState}
 */
proto.hive.vehicle_state.VehicleState.prototype.getVehicleOperatingState = function() {
  return /** @type{?proto.hive.vehicle_state.VehicleOperatingState} */ (
    jspb.Message.getWrapperField(this, proto.hive.vehicle_state.VehicleOperatingState, 18));
};


/** @param {?proto.hive.vehicle_state.VehicleOperatingState|undefined} value */
proto.hive.vehicle_state.VehicleState.prototype.setVehicleOperatingState = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.hive.vehicle_state.VehicleState.prototype.clearVehicleOperatingState = function() {
  this.setVehicleOperatingState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hive.vehicle_state.VehicleState.prototype.hasVehicleOperatingState = function() {
  return jspb.Message.getField(this, 18) != null;
};


goog.object.extend(exports, proto.hive.vehicle_state);
